Directives:

  EraseEngine
    Support in "server config", <VirtualHost>, <Global>, <Anonymous>,
      <Directory>

  EraseIterations
    Number of passes to make over the data blocks, writing obscuring bytes

  EraseLog

  EraseOptions UseSecureRNG UseZero

Overview

On most Unix systems, the unlink(2) system call "deletes" a file by deleting
the pointer to the disk block, containing the file data, from the directory
"table of contents" which points to that block.  As one article described
the process:

  "It's like going to a library and 'deleting' a book by removing references
   to the book from the library card catalog/search index.  The book is still
   lying on the shelf in the library."

The goal of mod_erase is to "securely erase" the file data.  This is a
surprisingly difficult task (depending on how paranoid you are).

srm:

  http://srm.sourceforge.net

GNU shred(1):

  Part of GNU coreutils
    coreutils-8.13/src/shred.c

Implement SITE command for requesting this feature specifically?  What
about a mod_sftp SFTP extension, e.g. "erase@proftpd.org"?

Notes

Limitations on network, journaling filesystems.  Leads to discussion of
encrypting files before upload/storage.

Must operate on a regular file (not directory, socket, pipe, etc).  What
about symlinks?

Automatically change permissions to allow writing (as long as allowed by
directory perms).

Rename to random/gibberish bytes.
Use fsync(2) on fd after each pass, to avoid disk cache buffering!  Similarly,
try to use the O_DIRECT open(2) flag, if available.

Truncate and unlink when done.

Can take a while, especially on large files.

  "Most of these utilities are not effective (read as useless) only if :

    * File system is log-structured or journaled filesystems, such as JFS,
      ReiserFS, XFS, Ext3 etc
    * Your filesystems is RAID-based, compressed filesystem etc
    * In addition, file system backups and remote mirrors may contain copies
      of the file that cannot be removed by these utilities.

  (from http://www.cyberciti.biz/tips/linux-how-to-delete-file-securely.html)

If you are disposing of a drive, *wipe the entire drive*, not just specific
files.  (But this is not the purpose of this mod_erase module.)

  "They only don't work as expected on journaling filesystems under certain
   conditions. From the shred manpage:

     In the case of ext3 file systems, the above disclaimer applies (and shred
     is thus of limited effectiveness) only in data=journal mode, which
     journals file data in addition to just metadata. In both the data=ordered
     (default) and data=writeback modes, shred works as usual.

   Ubuntu uses data=ordered by default, so unless you changed this yourself,
   shred will work as expected.
 
Linux:
  sd(4), hd(4) man pages
  BLKDISCARD ioctl (<linux/fs.h>)

Links/Articles

  http://en.wikipedia.org/wiki/Data_erasure
  http://en.wikipedia.org/wiki/Gutmann_method 
    http://www.cs.auckland.ac.nz/~pgut001/pubs/secure_del.html
    http://cmrr.ucsd.edu/people/Hughes/DataSanitizationTutorial.pdf
  http://en.wikipedia.org/wiki/Data_remanence
  http://en.wikipedia.org/wiki/Srm_%28Unix%29
  http://en.wikipedia.org/wiki/Shred_%28Unix%29
  http://www.slac.stanford.edu/comp/unix/secure-erase.html
    https://computing.llnl.gov/linux/scrub.html
      http://code.google.com/p/diskscrub/

  https://www-304.ibm.com/connections/blogs/pci/entry/pci_compliance_secure_delete_journaling_file_systems?lang=en_us

    http://www.monetra.com/docs/security/secure_delete.pdf  
      "Why Secure Delete Doesn't Work and No Sensitive Data Should Ever Be
       Stored Unencrypted On Disk"

  https://www-304.ibm.com/connections/blogs/pci/entry/meeting_the_spirit_of_pci_of_secure_delete?lang=en_us
